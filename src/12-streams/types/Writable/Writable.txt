Examples of Writable streams include:

HTTP requests, on the client
HTTP responses, on the server
fs write streams
zlib streams
crypto streams
TCP sockets
child process stdin
process.stdout, process.stderr



## Events ##

unpipe
src <stream.Readable> The source stream unpiped this writable
The 'unpipe' event is emitted when the stream.unpipe() method is called on a Readble stream, removing this Writable from its set of destinations.

error
The 'error' event is emitted when an error occure while writing or piping data. The listener callback is passed a single Error argument when called
After 'error', no further events other than 'close' should be emitted(including 'error' events)

close
is emitted when the stream and any of its underlying resources have been closed



Methods
cork() forces all written data to be buffered in memory. The buffered data will be flushed when either the stream.uncork() or stream.end() methods are called

The primary intent of cork() is to accomodate a situation in which several small chanks are written to the stream in rapid succession. Instead of immediately forwarding them to the underlying destination, cork() buffers all the chunk until uncork() is called, which will pass them all to writable._writev(), if present. The prevents a head-of-line blocking situation where data is being buffered while waiting for the first small chunk to be processed. Howewer, use of cork() without implementing writable._writev() may have an adverse effect on throughput.


uncork() flushes all data buffered since cork() was called
When using cork() and uncork() to manage the buffering of writes to a stream, it is recommended that calls to uncork() be reffered using process.nextTick(). Doing so allows batching of all writable.write() calls that occur within a given Node.js event loop phase.

destroy()




write()
